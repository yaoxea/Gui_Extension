######################################################
################### COUNTY VIEW ######################
######################################################
window = {
	name = "holding_view"
	widgetid = "holding_view_id"
	parentanchor = bottom|left
	allow_outside = yes
	movable = no
	layer = windows_layer
	size = { 625 730 }#690 to ensure illustration keep 585*270 / 730 to ensure holding button show completely
	background = {
		texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
		spriteType = Corneredtiled
		spriteborder = { 18 18 }
		margin = { -23 -17 }
		margin_left = 20
		margin_bottom = 20
		texture_density = 2
		modify_texture = {
			name = "overlay"
			texture = "gfx/interface/component_overlay/overlay_effect.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
	}
	state = {
		name = _show
		on_start = "[GetVariableSystem.Set('county_view_open','true')]"
		on_start = "[GetVariableSystem.Set('hide_bottom_left_HUD','true')]"
		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
		using = Animation_FadeIn_BottomLeft
	}
	state = {
		name = _hide
		on_start = "[GetVariableSystem.Clear('county_view_open')]"
		on_start = "[GetVariableSystem.Clear('hide_bottom_left_HUD')]"
		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
		using = Animation_FadeOut_BottomLeft
	}
	vbox = {#County View Window
		name = "window_content"
		margin_right = 40
		margin_top = 35
		datacontext = "[HoldingView.GetHolding]"
		datacontext = "[HoldingView.GetProvince]"
		datacontext = "[HoldingView.GetHolder]"
		datacontext = "[Province.GetCounty]"
		hbox = {#CoA & Name & Belonging & Siege & Raid & View_button
			name = "county_header"
			layoutpolicy_horizontal = expanding
			margin_right = 15
			margin_left = 5
			margin_top = 5
			margin_bottom = 5
			spacing = 2
			background = {
				using = Background_Area_Dark
				margin_left = 5
			}
			coa_title_small = {#CoA
				datacontext = "[HoldingView.GetCountyTitle]"
			}
			vbox = {#Name & Belonging
				hbox = {#Name & Name_edit
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes
					text_single = {#Name
						layoutpolicy_horizontal = expanding
						text = "[HoldingView.GetCountyTitle.GetNameNoTooltip]"
						margin_bottom = 4
						using = Font_Size_Big
						font = TitleFont
						max_width = 380
						fontsize_min = 16
					}
					button_edit_text = {#Name_edit
						visible = "[HoldingView.GetCountyTitle.CanPlayerCustomizeTitle]"
						onclick = "[OpenTitleCustomizationWindow(HoldingView.GetCountyTitle)]"
						tooltip = "CUSTOMIZE_TITLE"
					}
				}
				vbox = {#Belonging
					datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
					layoutpolicy_horizontal = expanding
					text_single = {#Belong_to_you
						name = "your_county"
						visible = "[ObjectsEqual(Character.Self,GetPlayer)]"
						layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_YOUR_COUNTY"
						margin_left = 2
						margin_bottom = 4
						using = Font_Size_Small
					}
					text_single = {#Belong_to_top_liege
						name = "top_realm_county"
						visible = "[Character.IsOtherLiegeOrAbove(GetPlayer)]"
						layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_TOP_REALM_COUNTY"
						margin_left = 5
						margin_bottom = 4
						using = Font_Size_Small
					}
					text_single = {#Belong_to_foreign
						name = "foreign_county"
						visible = "[Not(Or(ObjectsEqual(Character.Self,GetPlayer),Character.IsOtherLiegeOrAbove(GetPlayer)))]"
						layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_FOREIGN_COUNTY"
						margin_left = 5
						margin_bottom = 4
						using = Font_Size_Small
					}
				}
			}
			expand = {}
			button_group = {#Siege
				name = "open_siege_button"
				datacontext = "[HoldingView.GetProvince.GetSiege]"
				visible = "[HoldingView.GetProvince.HasActiveSiege]"
				onclick = "[DefaultOnSiegeClick(Siege.GetID)]"
				tooltip = "[Siege.GetSiegeDescription]"
				using = tooltip_se
				shortcut = county_go_to_siege
				using = siege_goto_template
			}
			button_group = {#Raid
				name = "open_raid_button"
				datacontext = "[HoldingView.GetProvince.GetRaid]"
				visible = "[HoldingView.GetProvince.HasActiveRaid]"
				onclick = "[DefaultOnRaidClick(Raid.Self)]"
				tooltip = "MAP_RAID_TOOLTIP"
				shortcut = county_go_to_siege
				using = tooltip_se
				using = raid_goto_template
				blockoverride "tooltip" {}
			}
			buttons_window_control = {#View_button
				blockoverride "button_go_to"
				{
					tooltip = "GOTO_PROVINCE_TT"
					using = tooltip_ne
					onclick = "[HoldingView.PanToCountyCapital]"
				}
				blockoverride "button_back"
				{
					visible = "[HasViewHistory]"
					onclick = "[OpenFromViewHistory]"
					tooltip = "[GetViewHistoryTooltip]"
				}
				blockoverride "button_close"
				{
					onclick = "[HoldingView.Close]"
				}
			}
		}
		hbox = {#Dejure_liege & County_modifier & County_occupied_info
			layoutpolicy_horizontal = expanding
			margin = { 10 2 }
			spacing = 6
			hbox = {#Dejure_liege
				datamodel = "[HoldingView.GetDeJureLieges]"
				item = {
					coa_title_tiny_crown = {
						visible = "[GreaterThan_int32(Title.GetTierFrame,'(int32)3')]"
						using = tooltip_se
					}
				}
			}
			text_single = {#Dejure_description
				text = "DE_JURE_HIERARCHY"
				default_format = "#low"
			}
			expand = {}
			hbox = {#County_modifier
				name = "county_modifiers_grid"
				datamodel = "[HoldingView.GetCountyModifiers]"
				item = {
					icon = {
						size = { 30 30 }
						texture = "[ModifierItem.GetIcon]"
						using = tooltip_ne
						tooltip = "[ModifierItem.GetTooltip]"
					}
				}
			}
			hbox = {#County_occupied_info
				layoutpolicy_vertical = expanding
				visible = [County.IsFullyOccupied]
				datacontext = [County.GetCountyOccupant]
				widget = {
					size = { 52 52 }
					icon = {
						size = { 70 70 }
						name = "war_icon"
						texture = "gfx/interface/icons/war_status/war_icon.dds"
						parentanchor = center
					}
					coa_realm_small = {
						position = { 1 0 }
						blockoverride "coa_button" {
							tooltip = "COUNTY_OCCUPIER_TOOLTIP"
							onclick = "[DefaultOnRealmFlagClick(Character.GetID)]"
							onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
							button_ignore = none
							tooltip_enabled = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
						}
					}
				}
			}
		}
		hbox = {#County_holder & County_info
			name = "county_info"
			datacontext = "[HoldingView.GetProvince.GetCountyCapitalProvince]"
			layoutpolicy_horizontal = expanding
			background = {
				using = Background_Area
				margin_bottom = -2
			}
			hbox = {#County_holder
				name = "holder_info"
				datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
				visible = "[HoldingView.GetProvince.HasCountyCapitalProvince]"
				layoutpolicy_horizontal = expanding
				margin = { 5 5 }
				margin_right = 15
				background = {
					name = "Held_directly_by_me"
					visible = "[ObjectsEqual(Character.Self,GetPlayer)]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_06.dds"
					spriteType = Corneredtiled
					margin = { -7 -5 }
					using = Color_Green
					alpha = 0.2
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
						blend_mode = alphamultiply
						mirror = horizontal
					}
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_rough_edges.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						texture_density = 2
						blend_mode = alphamultiply
					}
				}
				background = {
					name = "Held_by_someone_below_me"
					visible = "[Character.IsOtherLiegeOrAbove(GetPlayer)]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_06.dds"
					spriteType = Corneredtiled
					margin = { -7 -5 }
					using = Color_Blue
					alpha = 0.2
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
						blend_mode = alphamultiply
						mirror = horizontal
					}
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_rough_edges.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						texture_density = 2
						blend_mode = alphamultiply
					}
				}
				background = {
					name = "Held_under_my_Top_Liege,_but_Not_Me"
					visible = "[And(And(Not(ObjectsEqual(Character.Self,GetPlayer)),Not(Character.IsOtherLiegeOrAbove(GetPlayer))),ObjectsEqual(Character.GetTopLiege,GetPlayer.GetTopLiege))]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_06.dds"
					spriteType = Corneredtiled
					margin = { -7 -5 }
					using = Color_Bright_Yellow
					alpha = 0.2
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
						blend_mode = alphamultiply
						mirror = horizontal
					}
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_rough_edges.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						texture_density = 2
						blend_mode = alphamultiply
					}
				}
				portrait_head = {}
				vbox = {#Holder_description
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_top = 6
					vbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 10
						margin_bottom = 10
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_COUNTY_HOLDER"
							default_format = "#low"
						}
						hbox = {
							layoutpolicy_horizontal = expanding
							text_multi = {
								datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
								visible = "[And(Character.HasRelationTo(GetPlayer),Not(Character.IsPlayer))]"
								layoutpolicy_horizontal = expanding
								max_width = 187
								text = "[Character.GetRelationToString(GetPlayer)]"
								tooltip = "EXTENDED_RELATIONS_TOOLTIP"
								autoresize = yes
							}
						}
						text_multi = {
							datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
							layoutpolicy_horizontal = expanding
							max_width = 188
							text = "[Character.GetShortUINameNoTooltip|U]"
							default_format = "#high"
							autoresize = yes
						}
					}
					expand = {}
				}
			}
			vbox = {#County_info
				name = "county_stats"
				layoutpolicy_vertical = expanding
				margin = { 10 10 }
				margin_right = 15
				min_width = 260
				hbox = {
					layoutpolicy_horizontal = expanding
					datacontext = "[HoldingView.GetProvince.GetCounty]";
					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[control|E]:"
					}
					text_single = {
						text = "[County.GetControlLevel]"
						default_format = "#high"
						tooltip = "COUNTY_CONTROL_TOOLTIP"
						background = {
							visible = "[LessThan_CFixedPoint(County.GetControl,'(CFixedPoint)100')]"
							margin = { 5 0 }
							using = Status_Bad
						}
					}
				}
				hbox = {
					layoutpolicy_horizontal = expanding
					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[development|E]:"
					}
					text_single = {
						text = "[HoldingView.GetProvince.GetCounty.GetDevelopmentLevelString]"
						default_format = "#high"
						tooltip = "COUNTY_DEVELOPMENT_TOOLTIP"
					}
				}
				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3
					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[county_opinion|E]:"
					}
					button_normal = {
						name = "in_faction"
						visible = "[HoldingView.IsInFaction]"
						onclick = "[HoldingView.OnGotoFaction]"
						tooltip = "COUNTY_IN_FACTION_TOOLTIP"
						size = { 20 20 }
						texture = "gfx/interface/icons/symbols/icon_warning.dds"
					}
					text_single = {
						text = "[HoldingView.GetCountyOpinion|=+]"
						default_format = "#high"
						tooltip = "COUNTY_OPINION_TOOLTIP"
					}
				}
				hbox = {
					datacontext = "[Province.GetCounty.GetCulture]"
					layoutpolicy_horizontal = expanding
					spacing = 2
					using = tooltip_ne
					tooltipwidget = {
						culture_tooltip = {
							blockoverride "extra_info"
							{
								text_single = {
									fonttintcolor = "[TooltipInfo.GetTintColor]"
									using = DefaultTooltipText
									visible = "[Not(ObjectsEqual(Culture.Self,GetPlayer.GetCulture))]"
									text = "COUNTY_NOT_YOUR_CULTURE"
								}
							}
						}
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[culture|E]:"
					}
					button_group = {
						# shortcut = "innovations_window"
						onclick = "[OpenGameViewData('culture_window',Culture.GetID)]"
						text_single = {
							text = "CULTURE_COUNTY_WINDOW"
							default_format = "#high"
							background = {
								visible = "[NotEqualTo_uint32(Culture.GetID,GetPlayer.GetCulture.GetID)]"
								margin = { 5 0 }
								using = Status_Bad
							}
						}
					}
				}
				hbox = {
					datacontext = "[Province.GetCounty.GetFaith]"
					layoutpolicy_horizontal = expanding
					spacing = 2
					using = tooltip_ne
					tooltipwidget = {
						faith_tooltip = {
							blockoverride "extra_info" {
								using = faith_tooltip_click_default_extra_info
								text_single = {
									margin = { 10 0 }
									layoutpolicy_horizontal = expanding
									fonttintcolor = "[TooltipInfo.GetTintColor]"
									using = DefaultTooltipText
									visible = "[Not(ObjectsEqual(Faith.Self,GetPlayer.GetFaith))]"
									text = "COUNTY_NOT_YOUR_FAITH"
								}
							}
						}
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						raw_text = "[faith|E]:"
					}
					vbox = {
						expand = { minimumsize = { 0 2 } }
						icon = {
							size = { 22 22 }
							datacontext = "[Province.GetCounty.GetFaith]"
							texture = "[Faith.GetIcon]"
						}
					}
					button_group = {
						# shortcut = "faith_window"
						onclick = "[OpenGameViewData('faith',Faith.GetID)]"
						text_single = {
							text = "[Faith.GetNameNoTooltip]"
							default_format = "#high"
							background = {
								visible = "[NotEqualTo_uint32(Faith.GetID,GetPlayer.GetFaith.GetID)]"
								margin = { 5 0 }
								using = Status_Bad
							}
						}
					}
				}
			}
		}
		divider = {
			layoutpolicy_horizontal = expanding
		}
		hbox = {#County_holding_list
			layoutpolicy_horizontal = expanding
			hbox = {
				margin_left = 5
				spacing = 5
				datamodel = "[HoldingView.GetCountyHoldings]"
				item = {
					button_tab_dark = {
						datacontext = "[GUICountyHolding.GetHolding]"
						size = { 45 45  }
						down = "[GUICountyHolding.IsSelected]"
						alwaystransparent = "[GUICountyHolding.IsSelected]"
						onclick = "[GUICountyHolding.OnClick]"
						onclick = "[PdxGuiTriggerAllAnimations('holding_view_refresh')]"
						using = tooltip_ne
						tooltipwidget = { holding_tooltip_click = {} }
						icon_building_tab = {
							parentanchor = center
							position = { 0 1 }
							size = { 35 30 }
							alwaystransparent = yes
							down = "[GUICountyHolding.IsSelected]"
							texture = "[GUICountyHolding.GetHolding.GetType.GetTabIcon]"
							blockoverride "button_frames"
							{
								gfxtype = togglepushbuttongfx
								effectname = "NoHighlight"
								upframe = 4
								uphoverframe = 5
								uppressedframe = 6
								downframe = 5
							}
						}
						icon = {
							name = "realm_capital_icon"
							visible = "[GUICountyHolding.GetHolding.GetProvince.GetTitle.IsCountyCapital]"
							parentanchor = bottom|right
							size = { 32 32 }
							position = { 4 0 }
							framesize = { 63 63 }
							texture = "gfx/interface/icons/icon_capital.dds"
							frame = 1
						}
					}
				}
			}
			expand = {}
		}
		margin_widget = {#Barony_title & Barony_holder & Barony_info
			name = "holding_info"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			minimumsize = { 0 200 }
			margin = { 10 5 }
			margin_bottom = 10
			margin_right = 15
			scissor = yes
			state = {
				name = "holding_view_refresh"
				next = a
				alpha = 0.5
			}
			state = {
				name = "a"
				alpha = 1
				duration = 0.5
				using = Animation_Curve_Default
			}
			background = {#Dark_background
				using = Background_Area_Dark
				margin_left = 5
				margin_top = 3
			}
			background = {#Image_background_yes
				visible = "[HoldingView.HasHolding]"
				texture = "[HoldingView.GetHolding.GetIllustration]"
				alpha = 0.8
				modify_texture = {
					texture = "gfx/interface/window_county/mask_holding_illustration.dds"
					blend_mode = alphamultiply
					alpha = 0.95
				}
			}
			background = {#Image_background_no
				visible = "[Not(HoldingView.HasHolding)]"
				texture = "[HoldingView.GetProvince.GetTerrain.GetIllustration]"
				alpha = 0.7
				modify_texture = {
					texture = "gfx/interface/window_county/mask_holding_illustration.dds"
					blend_mode = alphamultiply
					alpha = 0.95
				}
			}
			vbox = {#Holding_construction_progress
				name = "constructing_holding"
				visible = "[HoldingView.IsBeingConstructed]"
				parentanchor = center
				spacing = 5
				expand = {}
				progressbar_standard = {#Progress_bar
					name = "constructing_holding_progress"
					alwaystransparent = yes
					size = { 300 30 }
					value = "[HoldingView.GetConstructionProgressForSlot('(int32)0')]"
					direction = horizontal
					tooltip = "[HoldingView.GetHoldingUnderConstructionTooltip]"
					text_single = {
						parentanchor = center
						text = "[HoldingView.GetConstructionTimeLeftForSlot('(int32)0')]"
						default_format = "#high"
						align = nobaseline
						using = Font_Size_Medium
					}
				}
				button_standard_big = {#Stop_construction
					name = "cancel_holding_construction"
					size = { 300 30 }
					text = "CANCEL_HOLDING_CONSTRUCTION"
					visible = "[HoldingView.CanCancelConstruction]"
					onclick = "[HoldingView.CancelHoldingConstruction]"
					tooltip = "CANCEL_HOLDING_CONSTRUCTION_TOOLTIP"
				}
				expand = {}
			}
			background = {#Deco_background
				visible = "[And(NotEqualTo_uint32(HoldingView.GetCountyTitle.GetHolder.GetID,HoldingView.GetTitle.GetLesseeOrHolder.GetID),HoldingView.GetTitle.HasHolder)]"
				texture = "gfx/interface/component_masks/mask_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 15 15 }
				using = Color_Blue
				margin = { -3 -3 }
				alpha = 0.3
			}
			background = {#Leased_to_church
				visible = no
				texture = "gfx/interface/component_masks/mask_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 15 15 }
				using = Color_Red
				margin = { -3 -3 }
			}
			background = {#Leased_to_holy_order
				visible = no
				texture = "gfx/interface/component_masks/mask_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 15 15 }
				using = Color_Green
				margin = { -3 -3 }
			}
			button_standard_big = {#Construct_new_holding
				name = "construct_holding"
				visible = "[And(Not(HoldingView.HasHolding),Not(HoldingView.IsBeingConstructed))]"
				parentanchor = bottom|hcenter
				position = { 0 -10 }
				size = { 300 50 }
				text = "CREATE_NEW_HOLDING_BUTTON"
				onclick = "[HoldingView.OnConstructHoldingClick]"
				tooltip = "[HoldingView.GetHoldingConstructionTooltip]"
				enabled = "[And(HoldingView.CanNewHoldingBeConstructed,Not(HoldingView.IsSelectingHoldingType))]"
			}
			flowcontainer = {#Barony_coa & Barony_capital
				ignoreinvisible = yes
				spacing = 5
				margin = { 5 5 }
				coa_title_medium = {#Barony_coa
					datacontext = "[HoldingView.GetTitle]"
					visible = "[HoldingView.GetTitle.HasHolder]"
				}
				flowcontainer = {#Barony_capital
					direction = vertical
					ignoreinvisible = yes
					margin_top = 5
					flowcontainer = {#Barony_name & Capital_info
						visible = "[HoldingView.GetTitle.HasHolder]"
						ignoreinvisible = yes
						text_single = {#Barony_name
							text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
							tooltip = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
							default_format = "#high"
							align = nobaseline
							using = Font_Size_Big
							max_width = 150
							fontsize_min = 14
						}
						button_edit_text = {#Barony_name_edit
							visible = "[HoldingView.GetProvince.GetTitle.CanPlayerCustomizeTitle]"
							parentanchor = vcenter
							size = { 25 25 }
							onclick = "[OpenTitleCustomizationWindow(HoldingView.GetProvince.GetTitle)]"
							tooltip = "CUSTOMIZE_TITLE"
						}
						spacer = {
							size = { 3 3 }
						}
						widget = {#County_capital
							size = { 32 32 }
							visible = "[And(HoldingView.GetProvince.GetTitle.IsCountyCapital,Not(HoldingView.GetProvince.IsRealmCapital))]"
							icon = {
								name = "county_capital_icon"
								parentanchor = center
								size = { 40 40 }
								texture = "gfx/interface/icons/icon_capital.dds"
								framesize = { 63 63 }
								frame = 1
								tooltip = "COUNTY_CAPITAL_TOOLTIP"
							}
						}
						widget = {#Realm_capital
							size = { 32 32 }
							visible = "[HoldingView.GetProvince.IsRealmCapital]"
							icon = {
								name = "realm_capital_icon"
								parentanchor = center
								size = { 40 40 }
								framesize = { 63 63 }
								texture = "gfx/interface/icons/icon_capital.dds"
								frame = 2
								tooltip = "REALM_CAPITAL_TOOLTIP"
							}
						}
						widget = {##Realm_capital_edit
							size = { 32 32 }
							button_move_capital = {
								name = "set_realm_capital_button"
								visible = "[HoldingView.PotentialSetRealmCapital]"
								position = { -3 5 }
								texture = "gfx/interface/icons/flat_icons/move_capital.dds"
								onclick = "[HoldingView.SetRealmCapital]"
								tooltip = "[HoldingView.GetSetRealmCapitalTooltip]"
								enabled = "[HoldingView.CanSetRealmCapital]"
							}
							button_move_capital = {
								name = "set_county_capital_button"
								visible = "[HoldingView.CanSetCountyCapital]"
								position = { -3 5 }
								texture = "gfx/interface/icons/flat_icons/move_capital.dds"
								onclick = "[HoldingView.SetCountyCapital]"
								tooltip = "SET_COUNTY_CAPITAL_TOOLTIP"
							}
						}
					}
					text_single = {#Barony_empty
						visible = "[Not(HoldingView.GetTitle.HasHolder)]"
						text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
						default_format = "#medium"
						using = Font_Size_Big
					}
					flowcontainer = {#Barony_belonging
						datacontext = "[HoldingView.GetGUIHoldingBuilding]"
						ignoreinvisible = yes
						text_label_left = {
							text = "[HoldingView.GetHoldingDesc]"
						}
					}
					text_single = {#Barony_occupied_info
						visible = "[HoldingView.GetProvince.IsOccupied]"
						text = "[HoldingView.GetOccupiedInfo]"
						default_format = "#high"
					}
				}
			}
			widget = {#Find_vassal & Holder_info
				parentanchor = bottom|left
				size = { 280 150 }
				alwaystransparent = yes
				background = {
					visible = "[And(NotEqualTo_uint32(HoldingView.GetCountyTitle.GetHolder.GetID,HoldingView.GetTitle.GetLesseeOrHolder.GetID),HoldingView.GetTitle.HasHolder)]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
					spriteType = Corneredtiled
					using = Color_Blue
					alpha = 0.6
					margin_bottom = 10
					margin_left = 5
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
						blend_mode = alphamultiply
						alpha = 0.9
						mirror = horizontal
					}
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_texture_01.dds"
						spriteType = Corneredtiled
						spriteborder = { 15 15 }
						blend_mode = alphamultiply
					}
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
						blend_mode = alphamultiply
						mirror = vertical
					}
				}
				background = {
					visible = "[And(NotEqualTo_uint32(HoldingView.GetCountyTitle.GetHolder.GetID,HoldingView.GetTitle.GetLesseeOrHolder.GetID),HoldingView.GetTitle.HasHolder)]"
					texture = "gfx/interface/component_masks/mask_frame.dds"
					spriteType = Corneredstretched
					spriteborder = { 15 15 }
					using = Color_Blue
					alpha = 0.6
					margin_bottom = 10
					margin_left = 5
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
						blend_mode = alphamultiply
						alpha = 0.9
						mirror = horizontal
					}
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
						blend_mode = alphamultiply
						mirror = vertical
					}
				}
				vbox = {#Find_vassal & Holder_info
					expand = {
						visible = "[Not(And(HoldingView.HasDuchyCapitalBuildingSlot,HoldingView.HasSpecialBuildingSlot))]"
					}
					hbox = {#Find_vassal
						layoutpolicy_horizontal = expanding
						margin = { 5 0 }
						button_standard = {#Find_vassal
							name = "toggle_find_vassal"
							visible = "[And(ObjectsEqual(HoldingView.GetTitle.GetHolder,GetPlayer),Not(HoldingView.GetTitle.IsLeasedOut))]"
							enabled = "[HoldingView.CanGrantTitle]"
							text = "FIND_VASSAL_HEADER"
							onclick = "[HoldingView.ToggleFindVassalListWindow]"
							tooltip = "FIND_VASSAL_BUTTON_HOLDING_VIEW_TOOLTIP"
							max_width = 150
						}
						expand = {}
					}
					hbox = {#Holder_info
						datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
						visible = "[And(NotEqualTo_uint32(HoldingView.GetCountyTitle.GetHolder.GetID,HoldingView.GetTitle.GetLesseeOrHolder.GetID),HoldingView.GetTitle.HasHolder)]"
						layoutpolicy_horizontal = expanding
						portrait_head_small = {
							blockoverride "opinion_box" {}
						}
						vbox = {#Liege & Theocracy
							name = "theocracy_property"
							datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
							layoutpolicy_vertical = expanding
							margin_top = 5
							margin_bottom = 5
							margin_left = 5
							expand = {}
							text_single = {#Liege_holder
								datacontext = "[HoldingView.GetTitle]"
								visible = "[Not(Title.IsLeasedOut)]"
								layoutpolicy_horizontal = expanding
								text = "HOLDING_VIEW_HOLDER"
								default_format = "#low"
							}
							text_single = {#Theocracy_holder
								datacontext = "[HoldingView.GetTitle]"
								visible = "[Title.IsLeasedOut]"
								layoutpolicy_horizontal = expanding
								text = "HOLDING_VIEW_LESSEE"
								default_format = "#low"
							}
							text_multi = {#Relation
								visible = "[Character.HasRelationTo(GetPlayer)]"
								layoutpolicy_horizontal = expanding
								text = "[Character.GetRelationToString(GetPlayer)]"
								tooltip = "EXTENDED_RELATIONS_TOOLTIP"
								default_format = "#low"
								autoresize = yes
							}
							text_multi = {#Holder_name
								layoutpolicy_horizontal = expanding
								text = "[Character.GetShortUIName]"
								format_override = { high medium }
								autoresize = yes
							}
						}
						expand = {}
					}
					expand = {
						visible = "[And(HoldingView.HasDuchyCapitalBuildingSlot,HoldingView.HasSpecialBuildingSlot)]"
					}
				}
			}
			hbox = {#Climate & Terrain & Army & Modifier & Barony_info & Change_holding_type
				parentanchor = top|right
				margin_top = 5
				ignoreinvisible = yes
				expand = {}
				vbox = {#Climate & Terrain & Army & Modifier
					layoutpolicy_vertical = expanding
					margin = { 7 3 }
					hbox = {#Climate & Terrain
						spacing = 3
						icon = {#Mild Winter
							name = "winter_level_icon_mild"
							datacontext = "[HoldingView.GetProvince]"
							visible = "[Province.HasWinterLevel('(int32)1')]"
							texture = "gfx/interface/icons/terrain_types/winter_mild.dds"
							size = { 35 35 }
							tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
						}
						icon = {#Normal Winter
							name = "winter_level_icon_normal"
							datacontext = "[HoldingView.GetProvince]"
							visible = "[Province.HasWinterLevel('(int32)2')]"
							texture = "gfx/interface/icons/terrain_types/winter_normal.dds"
							size = { 35 35 }
							tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
						}
						icon = {#Harsh Winter
							name = "winter_level_icon_harsh"
							datacontext = "[HoldingView.GetProvince]"
							visible = "[Province.HasWinterLevel('(int32)3')]"
							texture = "gfx/interface/icons/terrain_types/winter_harsh.dds"
							size = { 35 35 }
							tooltip = "PROVINCE_VIEW_TOOLTIP_WINTER"
						}
						icon = {#Terrain
							name = "terrain"
							datacontext = "[HoldingView.GetProvince.GetTerrain]"
							texture = "[Terrain.GetIcon]"
							size = { 35 35 }
							tooltip = "HOLDING_TERRAIN_TOOLTIP"
						}
					}
					hbox = {#Station_army
						spacing = 3
						button_round = {
							name = "stationed_maa_button"
							size = { 35 35 }
							datacontext = "[HoldingView.GetProvince.GetMaaOriginHere]"
							visible = "[And(ObjectsEqual(HoldingView.GetTitle.GetHolder,GetPlayer),Regiment.IsValid)]"
							tooltip = "VIEW_MAA_ORIGIN_TT"
							onclick = "[OpenGameView('military')]"
							onclick = "[OpenGameViewData('men_at_arms',Regiment.GetID)]"
							button_icon_highlight = {
								texture = "gfx/interface/icons/flat_icons/army_details.dds"
								parentanchor = center
								alwaystransparent = yes
								size = { 35 35 }
							}
						}
						icon = {
							datacontext = "[HoldingView.GetProvince.GetMaaOriginHere]"
							visible = "[Regiment.IsValid]"
							#visible = "[And(Not(ObjectsEqual(HoldingView.GetTitle.GetHolder,GetPlayer)),Regiment.IsValid)]"
							texture = "[Regiment.GetMAAType.GetIcon]"
							alwaystransparent = yes
							size = { 35 35 }
							tooltip = "SHOW_MAA_ORIGIN_TT"
						}
					}
					dynamicgridbox = {#Holding_modifier
						name = "holding_modifiers_grid"
						datamodel = "[HoldingView.GetHoldingModifiers]"
						flipdirection = yes
						item = {
							icon = {
								size = { 30 30 }
								alwaystransparent = no
								texture = "[ModifierItem.GetIcon]"
								using = tooltip_ne
								tooltip = "[ModifierItem.GetTooltip]"
							}
						}
					}
					expand = {}
				}
				vbox = {#Barony_info & Change_holding_type
					layoutpolicy_vertical = expanding
					margin_left = 5
					spacing = 3
					min_width = 150
					background = {
						visible = "[HoldingView.HasHolding]"
						using = Background_Area_Dark
						alpha = 0.7
						margin_left = 5
						margin_bottom = -20
					}
					hbox = {#Tax_income
						name = "tutorial_highlight_holding_view_taxes_box"
						visible = "[HoldingView.HasHolding]"
						layoutpolicy_horizontal = expanding
						margin = { 2 0 }
						spacing = 3
						tooltip = "[Holding.GetTaxTooltip]"
						background = {
							visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
							using = Status_Bad
						}
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_TAX"
							default_format = "#high"
						}
						text_single = {
							text = "HOLDING_TAX_VALUE"
							default_format = "#V"
						}
					}
					hbox = {#Raid_loot
						name = "tutorial_highlight_holding_view_loot_box"
						visible = "[HoldingView.HasHolding]"
						layoutpolicy_horizontal = expanding
						margin = { 2 0 }
						spacing = 3
						tooltip = "[Holding.GetProvince.GetRaidLootTooltip]"
						background = {
							visible = "[Holding.GetProvince.IsRecentlyLooted]"
							using = Status_Bad
						}
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_LOOT"
							default_format = "#high"
						}
						text_single = {
							text = "HOLDING_LOOT_VALUE"
						}
					}
					hbox = {#Supply_level
						tooltip = "[HoldingView.GetSupplyLimitTooltip]"
						layoutpolicy_horizontal = expanding
						margin = { 2 0 }
						spacing = 3
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "SUPPLY_LIMIT"
							default_format = "#high"
						}
						text_single = {
							raw_text = " [HoldingView.GetSupplyLimit|V]"
							default_format = "#high"
						}
					}
					hbox = {#Fort_level
						visible = "[HoldingView.GetProvince.HasFort]"
						tooltip = "[Province.GetFortLevelTooltip]"
						layoutpolicy_horizontal = expanding
						margin = { 2 0 }
						spacing = 3
						text_single = {
							layoutpolicy_horizontal = expanding
							text = "FORT"
							default_format = "#high"
						}
						text_single = {
							text = "FORT_LEVEL"
							default_format = "#high"
						}
					}
					vbox = {#Levies
						visible = "[HoldingView.HasHolding]"
						layoutpolicy_horizontal = expanding
						spacing = 2
						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3
							margin = { 2 0 }
							tooltip = "[Holding.GetLeviesTooltip]"
							background = {
								visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
								using = Status_Bad
							}
							text_single = {
								layoutpolicy_horizontal = expanding
								text = "LEVIES"
								default_format = "#high"
							}
							text_single = {
								text = "HOLDING_LEVY_SIZE"
								default_format = "#high"
							}
						}
						hbox = {
							layoutpolicy_horizontal = expanding
							progressbar_standard_transparent = {
								layoutpolicy_horizontal = expanding
								size = { 0 10 }
								value = "[Holding.GetUnraisedLevyRatioPercent]"
								direction = horizontal
							}
						}
					}					
					vbox = {#Garrison
						visible = "[HoldingView.GetProvince.HasFort]"
						layoutpolicy_horizontal = expanding
						spacing = 2
						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3
							margin = { 2 0 }
							tooltip = "[HoldingView.GetGarrisonTooltip]"
							text_single = {
								layoutpolicy_horizontal = expanding
								text = "GARRISON"
								default_format = "#high"
							}
							text_single = {
								text = "GARRISON_SIZE"
								default_format = "#high"
							}
						}
						hbox = {
							layoutpolicy_horizontal = expanding
							progressbar_standard_transparent = {
								layoutpolicy_horizontal = expanding
								size = { 0 10 }
								value = "[HoldingView.GetGarrisonRatio]"
								direction = horizontal
							}
						}
					}
					hbox = {#Change_holding_type
						layoutpolicy_horizontal = shrinking
						button_standard  = {#Castle_holding
							size = { 30 30 }
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And(Character.IsLocalPlayer,Character.IsPlayerInteractionShownAndCanPickTitle('ge_change_castle_holding_interaction',Title.Self))]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('ge_change_castle_holding_interaction',Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('ge_change_castle_holding_interaction',Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('ge_change_castle_holding_interaction',Title.Self)]"
							button_castle = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}
						button_standard  = {#City_holding
							size = { 30 30 }
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And(Character.IsLocalPlayer,Character.IsPlayerInteractionShownAndCanPickTitle('ge_change_city_holding_interaction',Title.Self))]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('ge_change_city_holding_interaction',Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('ge_change_city_holding_interaction',Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('ge_change_city_holding_interaction',Title.Self)]"
							button_city = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}
						button_standard  = {#Church_holding
							size = { 30 30 }
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And(Character.IsLocalPlayer,Character.IsPlayerInteractionShownAndCanPickTitle('ge_change_church_holding_interaction',Title.Self))]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('ge_change_church_holding_interaction',Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('ge_change_church_holding_interaction',Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('ge_change_church_holding_interaction',Title.Self)]"
							button_church = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}
						button_standard = {#Feudalize_holding
							size = { 30 30 }
							datacontext = "[HoldingView.GetGUIHoldingBuilding]"
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And(Character.IsLocalPlayer,Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_tribal_holding_interaction',Title.Self))]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_tribal_holding_interaction',Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_tribal_holding_interaction',Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_tribal_holding_interaction',Title.Self)]"
							button_feudalize_tribe = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}
						button_standard = {#Revoke_lease
							size = { 30 30 }
							datacontext = "[HoldingView.GetTitle]"
							datacontext = "[Title.GetLessee]"
							visible = "[And(Title.GetHolder.IsLocalPlayer,Character.IsPlayerInteractionShownAndCanPickTitle('revoke_leased_title_interaction',Title.Self))]"
							enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('revoke_leased_title_interaction',Title.Self)]"
							tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('revoke_leased_title_interaction',Title.Self)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[Character.OpenPlayerInteractionWithTargetTitle('revoke_leased_title_interaction',Title.Self)]"
							button_revoke_lease = {
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}
						button_standard  = {#Add_building_slot
							size = { 30 30 }
							datacontext = "[GetScriptedGui('ge_add_slot')]"
							visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('gui_holding', HoldingView.GetProvince.MakeScope).End)]"
							enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('gui_holding', HoldingView.GetProvince.MakeScope).End)]"
							tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('gui_holding', HoldingView.GetProvince.MakeScope).End)]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('gui_holding', HoldingView.GetProvince.MakeScope).End)]"
							button_add_slot = {
								size = { 25 25 }
								alpha = 0.5
								parentanchor = center
								alwaystransparent = yes
							}
						}
						# button_standard  = {#Remove_building_slot
							# size = { 30 30 }
							# datacontext = "[GetScriptedGui('ge_remove_slot')]"
							# visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('gui_holding', HoldingView.GetProvince.MakeScope).End)]"
							# enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('gui_holding', HoldingView.GetProvince.MakeScope).End)]"
							# tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('gui_holding', HoldingView.GetProvince.MakeScope).End)]"
							# oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
							# clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
							# onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('gui_holding', HoldingView.GetProvince.MakeScope).End)]"
							# button_remove_slot = {
								# size = { 25 25 }
								# alpha = 0.5
								# parentanchor = center
								# alwaystransparent = yes
							# }
						# }
					}
					expand = {}
				}
			}
			flowcontainer = {#Holding & Duchy & Special
				parentanchor = bottom|right
				righttoleft = yes
				ignoreinvisible = yes
				button_standard = {#Holding_button
					visible = "[HoldingView.GetTitle.HasHolder]"
					datacontext = "[HoldingView.GetGUIHoldingBuilding]"
					size = { 145 55 }
					onclick = "[GUIBuildingItem.OnClick]"
					down = "[GUIBuildingItem.IsHighlighted]"
					enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"
					tooltip = "[GUIBuildingItem.GetTooltip]"
					hbox = {#Holding_icon & Holding_name
						layoutpolicy_horizontal = expanding
						expand = {}
						icon_doctrine = {#Holding_icon
							parentanchor = left
							texture = "[HoldingView.GetHolding.GetType.GetTabIcon]"
							parentanchor = center
							size = { 45 35 }
						}
						text_single = {#Holding_name
							text = "[HoldingView.GetHolding.GetPrimaryBuildingType.GetTypeName]"
							align = nobaseline
						}
						expand = {}
					}
					flowcontainer = {#Warning
						parentanchor = top|left
						warning_icon = {#Warning_disabled
							name = "reduced_by_fixable_situation"
							visible = "[GUIBuildingItem.IsBuildingDisabled]"
							size = { 20 20 }
						}
						warning_icon = {#Warning_type
							name = "wrong_type"
							datacontext = "[HoldingView.GetHolder]"
							visible = "[And(Not(HoldingView.GetHolding.IsEmpty),Not(HoldingView.GetHolding.IsValidForLesseeOrHolder))]"
							size = { 20 20 }
							tooltip = HOLDING_VIEW_WRONG_HOLDING_TYPE
						}
					}
					text_single = {#Holding_level
						visible = "[GUIBuildingItem.HasLevel]"
						text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
						parentanchor = bottom|left
						position = { 6 -3 }
						fontsize = 15
						default_format = "#low;bold"
						align = nobaseline
						background = {
							using = Background_Area_Dark
							margin = { 5 0 }
						}
						background = {
							using = Background_Area_Dark
							margin = { 5 0 }
						}
						background = {
							using = Background_Area_Dark
							margin = { 5 0 }
						}
					}
					progressbar_standard = {#Holding_progress
						name = "holding_upgrade_progressbar"
						layoutpolicy_horizontal = expanding
						visible = "[GUIBuildingItem.IsConstructing]"
						size = { 0 10 }
						alwaystransparent = yes
						value = "[GUIBuildingItem.GetConstructingProgress]"
						tooltip = "[GUIBuildingItem.GetTooltip]"
					}
				}
				widget_building_item = {#Duchy_building
					datacontext = "[HoldingView.GetGUIDuchyCapitalBuilding]"
					visible = "[HoldingView.HasDuchyCapitalBuildingSlot]"
					ignoreinvisible = yes
					button_standard = {
						size = { 100% 100% }
						texture = "gfx/interface/buttons/button_duchy_capital.dds"
						alwaystransparent = yes
						spriteborder = { 20 20 }
					}
				}
				widget_building_item = {#Special_building
					datacontext = "[HoldingView.GetGUISpecialBuilding]"
					visible = "[HoldingView.HasSpecialBuildingSlot]"
					ignoreinvisible = yes
					button_standard = {
						size = { 100% 100% }
						texture = "gfx/interface/buttons/button_special_building.dds"
						alwaystransparent = yes
						spriteborder = { 20 20 }
					}
				}
			}
		}
		margin_widget = {#Normal_buildings
			name = "county_buildings"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_left = 10
			background = {
				using = Background_Area_Dark
			}
			scrollarea = {#Scroll_for_normal_buildings
				size = { 550 75 }#55+12+8
				parentanchor = center
				maximumsize = { 550 75 }
				autoresizescrollarea = yes
				scrollbar_horizontal = {#Scroll_policy
					using = Scrollbar_Horizontal
				}
				scrollwidget = {#Scroll_area
					flowcontainer = {#Normal_buildings
						name = "normal_building"
						margin_bottom = 15#Space_for_scroll_bar
						ignoreinvisible = yes
						parentanchor = left|vcenter
						flowcontainer = {#County_buildings
							name = "buildings_grid"
							datamodel = "[HoldingView.GetBuildings]"
							righttoleft = yes
							ignoreinvisible = yes
							item = {
								widget_building_item = {}
							}
						}
					}
				}
			}
			# Below is original version
			# flowcontainer = {
				# name = "normal_building"
				# parentanchor = left|vcenter
				# ignoreinvisible = yes
				# flowcontainer = {
					# name = "buildings_grid"
					# datamodel = "[HoldingView.GetBuildings]"
					# ignoreinvisible = yes
					# righttoleft = yes
					# item = {
						# widget_building_item = {}
					# }
				# }
			# }
			# expand = {}
		}
	}
}
######################################################
########### CONSTRUCT NEW BUILDING WINDOW ############
######################################################
window = {
	name = "holding_tracks_view"
	size = { 100% 100% }
	movable = no
	layer = windows_layer
	datacontext = "[HoldingView.GetHolder]"
	state = {
		name = _show
		using = Animation_FadeIn_Quick
		position_x = 0
	}
	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		position_x = -50
	}
	alwaystransparent = yes
	hbox = {
		expand = {
			max_width = 610
		}
		widget = {
			layoutpolicy_vertical = expanding
			size = { 725 0 }
			vbox = {
				margin_top = 170
				margin_bottom = 10
				expand = {}
				vbox = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 0 700 }
					## New Building
					vbox = {
						visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no
						margin = { 3 3 }
						margin_bottom = 5
						using = Window_Background_Subwindow
						header_pattern = {
							layoutpolicy_horizontal = expanding
							blockoverride "header_text"
							{
								text = "[HoldingView.GetTracksViewLabel]"
							}
							blockoverride "button_close"
							{
								onclick = "[HoldingView.CloseSubwindows]"
							}
						}
						building_in_vassal_warning_hbox = {}
						text_single = {
							layoutpolicy_horizontal = shrinking
							name = "prompt"
							text = "[HoldingView.GetTracksViewPrompt]"
							margin_bottom = 10
						}
						text_single = {
							visible = "[IsDataModelEmpty(HoldingView.GetPotentialBuildings)]"
							layoutpolicy_horizontal = shrinking
							name = "no_potential_buildings_text"
							text = "NO_POTENTIAL_BUILDINGS_WARNING"
							margin_bottom = 10
						}
						## Construct New Building
						container = {
							visible = "[Not(IsDataModelEmpty(HoldingView.GetPotentialBuildings))]"
							layoutpolicy_vertical = expanding
							scrollbox = {
								visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
								size = { 700 300 }
								autoresizescrollarea = yes
								maximumsize = { -1 800 }
								blockoverride "scrollbox_content"
								{
									name = "tracks_grid"
									datamodel = "[HoldingView.GetPotentialBuildings]"
									datacontext = "[HoldingView.GetProvince]"
									datacontext = "[HoldingView.GetProvince.GetCounty.GetCulture]"
									visible = "[HoldingView.IsSelectingNewBuilding]"
									spacing = 10
									set_parent_size_to_minimum = yes
									block "scrollbox_margins"
									{
										using = Scrollbox_Margins
										margin_right = 15
										margin_top = 5
									}
									item = {
										vbox = {
											layoutpolicy_horizontal = expanding
											background = {
												using = Background_Area_Light
											}
											hbox = {
												name = "header"
												layoutpolicy_horizontal = expanding
												background = {
													using = Background_Area
												}
												hbox = {
													layoutpolicy_horizontal = expanding
													margin = { 10 10 }
													spacing = 10
													icon_building = {
														name = "building_icon"
														size = { 75 65 }
														texture = "[GUIPotentialBuildingItem.GetBuilding.GetTypeIcon]"
													}
													vbox = {
														spacing = 5
														layoutpolicy_horizontal = expanding
														text_single = {
															layoutpolicy_horizontal = expanding
															text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeName]"
															using = Font_Size_Medium
															align = left
															autoresize = no
														}
														hbox = {
															button_tertiary = {
																text = "CONSTRUCT_BUILDINGS_DETAILS"
																onclick = "[GUIPotentialBuildingItem.ShowDetails]"
																tooltip = "CONSTRUCT_BUILDINGS_DETAILS_TT"
																using = tooltip_es
															}
															expand = {}
														}
													}
													expand = {}
													hbox = {
														spacing = 5
														hbox = {
															margin = { 5 5 }
															min_width = 120
															spacing = 10
															background = {
																using = Background_Area
																margin_bottom = 4
																margin_left = 6
															}
															text_single = {
																datacontext = "[GUIPotentialBuildingItem.GetGoldCost]"
																visible = "[GUIPotentialBuildingItem.HasGoldCost]"
																layoutpolicy_horizontal = expanding
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"
																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetGold,ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}
															text_single = {
																datacontext = "[GUIPotentialBuildingItem.GetPrestigeCost]"
																visible = "[GUIPotentialBuildingItem.HasPrestigeCost]"
																layoutpolicy_horizontal = expanding
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"
																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige,ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}
															text_single = {
																layoutpolicy_horizontal = expanding
																datacontext = "[GUIPotentialBuildingItem.GetPietyCost]"
																visible = "[GUIPotentialBuildingItem.HasPietyCost]"
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"
																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety,ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}
															text_single = {
																layoutpolicy_horizontal = expanding
																datacontext = "[GUIPotentialBuildingItem.GetConstructionTime]"
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"
																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}
															expand = {}
														}
														button_standard = {
															layoutpolicy_horizontal = expanding
															layoutpolicy_vertical = expanding
															size = { 100 53 }
															enabled = "[GUIPotentialBuildingItem.CanConstruct]"
															tooltip = "[GUIPotentialBuildingItem.GetTooltip]"
															onclick = "[GUIPotentialBuildingItem.Construct]"
															text = "CONSTRUCT"
															using = tooltip_es
														}
													}
												}
											}
											hbox = {
												name = "dynamic_content"
												layoutpolicy_horizontal = expanding
												margin = {5 5}
												text_multi = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													margin = {5 0}
													text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeDescription]"
													default_format = "#F"
													autoresize = yes
													max_width = 280
													min_width = 280
												}
												vbox = {
													spacing = 8
													hbox = {
														layoutpolicy_horizontal = expanding
														margin_left = 10
														text_label_left = {
															layoutpolicy_horizontal = expanding
															datacontext = "[GUIPotentialBuildingItem.GetBuilding]"
															text = CV_BUILDING_LEVEL_AND_NAME
															autoresize = no
														}
													}
													text_multi = {
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														autoresize = yes
														max_width = 355
														min_width = 355
														text = "[GUIPotentialBuildingItem.GetBuilding.GetEffectDescriptionAtProvince(Character.Self,Province.Self,Culture.Self)]"
														margin = { 15 10 }
														background = {
															using = Background_Frame
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					vbox = {
						vbox = {
							visible = "[HoldingView.IsSelectingBuildingToConstruct]"
							layoutpolicy_horizontal = expanding
							alwaystransparent = no
							## Upgrade Building
							vbox = {
								name = "upgrade"
								datacontext = "[HoldingView.GetTrack]"
								layoutpolicy_horizontal = expanding
								#minimumsize = { 0 700 }
								using = Window_Background_Subwindow
								margin_bottom = 10
								hbox = {
									layoutpolicy_horizontal = expanding
									margin = { 15 10 }
									spacing = 10
									background = {
										using = Background_Area
									}
									icon_building = {
										name = "building_icon"
										texture = "[GUITrackItem.GetSelectedBuilding.GetTypeIcon]"
									}
									vbox = {
										layoutpolicy_horizontal = expanding
										text_single = {
											layoutpolicy_horizontal = expanding
											text = "[GUITrackItem.GetSelectedBuilding.GetTypeName]"
											using = Font_Size_Big
											default_format = "#high"
										}
										text_single = {
											layoutpolicy_horizontal = expanding
											text = "[GUITrackItem.GetBuildingTypeText]"
										}
										building_in_vassal_warning_hbox = {
										}
									}
									buttons_window_control = {
										blockoverride "button_close"
										{
											onclick = "[HoldingView.CloseSubwindows]"
										}
									}
								}
								vbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									margin = { 15 5 }
									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 5 10 }
										### PREVIOUS BUILDINGS
										hbox = {
											name = "level_track_previous"
											datamodel = "[GUITrackItem.GetPreLevelItems]"
											item = {
												hbox = {
													button_icon = {
														name = "track_icon"
														onclick = "[BuildingLevelItem.OnClick]"
														down = "[BuildingLevelItem.IsSelected]"
														alwaystransparent = "[BuildingLevelItem.IsSelected]"
														size = { 60 60 }
														texture = "gfx/interface/buttons/button_round_big.dds"
														tooltip = "[BuildingLevelItem.GetTooltip]"
														using = tooltip_ne
														tooltip_offset = { 40 0 }
														background = {
															texture = "gfx/interface/window_county/building_status_circle.dds"
															framesize = { 120 120 }
															using = Master_Button_Modify_Texture
															blockoverride "master_color_frame" {
																frame = 3
															}
														}
														button_icon_highlight = {
															name = "level_icon"
															parentanchor = center
															size = { 41 24 }
															down = "[BuildingLevelItem.IsSelected]"
															texture = "[BuildingLevelItem.GetIcon]"
														}
														icon = {
															visible = "[BuildingLevelItem.IsSelected]"
															parentanchor = bottom|hcenter
															position = { 0 8 }
															texture = "gfx/interface/window_county/building_selected_arrow.dds"
															size = { 18 12 }
															using = Master_Button_Modify_Texture
															blockoverride "master_color_frame" {
																frame = 2
															}
														}
													}
													widget = {
														visible = "[GUITrackItem.HasCurrentBuilding]"
														layoutpolicy_horizontal = expanding
														size = { 5 6 }
														background = {
															texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
															margin = { 2 0 }
															using = Master_Button_Modify_Texture
															blockoverride "master_color_frame" {
																frame = 1
															}
														}
													}
												}
											}
										}
										### CURRENT BUILDING
										button_icon = {
											name = "current_building"
											visible = "[GUITrackItem.HasCurrentBuilding]"
											onclick = "[GUITrackItem.OnCurrentBuildingClick]"
											down = "[GUITrackItem.IsCurrentBuildingSelected]"
											alwaystransparent = "[GUITrackItem.IsCurrentBuildingSelected]"
											tooltip = "[GUITrackItem.GetCurrentBuildingTooltip]"
											using = tooltip_ws
											size = { 60 60 }
											texture = "gfx/interface/buttons/button_round_big.dds"
											using = tooltip_ne
											tooltip_offset = { 40 0 }
											background = {
												texture = "gfx/interface/window_county/building_status_circle.dds"
												framesize = { 120 120 }
												using = Master_Button_Modify_Texture
												blockoverride "master_color_frame" {
													frame = 3
												}
											}
											button_icon_highlight = {
												name = "level_icon"
												parentanchor = center
												size = { 41 24 }
												down = "[GUITrackItem.IsCurrentBuildingSelected]"
												texture = "[GUITrackItem.GetCurrentLevelIcon]"
											}
											icon = {
												visible = "[GUITrackItem.IsCurrentBuildingSelected]"
												parentanchor = bottom|hcenter
												position = { 0 8 }
												texture = "gfx/interface/window_county/building_selected_arrow.dds"
												size = { 18 12 }
												using = Master_Button_Modify_Texture
												blockoverride "master_color_frame" {
													frame = 2
												}
											}
										}
										expand = {
											visible = "[Not(And(GUITrackItem.HasCurrentBuilding,GUITrackItem.HasNextBuilding))]"
										}
										widget = {
											visible = "[And(GUITrackItem.HasCurrentBuilding,GUITrackItem.HasNextBuilding)]"
											layoutpolicy_horizontal = expanding
											size = { 5 6 }
											background = {
												texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
												margin = { 2 0 }
												using = Master_Button_Modify_Texture
												blockoverride "master_color_frame" {
													frame = 1
												}
											}
										}
										### NEXT BUILDING
										button_icon = {
											name = "next_building"
											visible = "[GUITrackItem.HasNextBuilding]"
											down = "[GUITrackItem.IsNextBuildingSelected]"
											alwaystransparent = "[GUITrackItem.IsNextBuildingSelected]"
											size = { 60 60 }
											texture = "gfx/interface/buttons/button_round_big.dds"
											onclick = "[GUITrackItem.OnNextBuildingClick]"
											tooltip = "[GUITrackItem.GetNextBuildingTooltip]"
											using = tooltip_ne
											tooltip_offset = { 40 0 }
											background = {
												visible = "[GUITrackItem.IsConstructing]"
												texture = "gfx/interface/window_county/building_status_circle.dds"
												framesize = { 120 120 }
												frame = 2
												alpha = 0.5
												using = Master_Button_Modify_Texture
												blockoverride "master_color_frame" {
													frame = 4
												}
											}
											button_icon_highlight = {
												name = "level_icon"
												parentanchor = center
												size = { 41 24 }
												down = "[GUITrackItem.IsNextBuildingSelected]"
												alwaystransparent = yes
												texture = "[GUITrackItem.GetNextLevelIcon]"
												#frame = "[GUITrackItem.GetNextLevelIconFrame]"
											}
											icon = {
												visible = "[GUITrackItem.IsNextBuildingSelected]"
												parentanchor = bottom|hcenter
												position = { 0 8 }
												texture = "gfx/interface/window_county/building_selected_arrow.dds"
												size = { 18 12 }
												using = Master_Button_Modify_Texture
												blockoverride "master_color_frame" {
													frame = 2
												}
											}
										}
										widget = {
											visible = "[Not(IsDataModelEmpty(GUITrackItem.GetPostLevelItems))]"
											layoutpolicy_horizontal = expanding
											size = { 5 6 }
											background = {
												texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
												margin = { 2 0 }
												using = Master_Button_Modify_Texture
												blockoverride "master_color_frame" {
													frame = 1
												}
											}
										}
										#Post Track
										### LEVEL TRACK
										hbox = {
											name = "level_track_next"
											datamodel = "[GUITrackItem.GetPostLevelItems]"
											item = {
												hbox = {
													widget = {
														layoutpolicy_horizontal = expanding
														size = { 5 6 }
														background = {
															texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
															margin = { 2 0 }
															using = Master_Button_Modify_Texture
															blockoverride "master_color_frame" {
																frame = 1
															}
														}
													}
													button_icon = {
														down = "[BuildingLevelItem.IsSelected]"
														alwaystransparent = "[BuildingLevelItem.IsSelected]"
														size = { 60 60 }
														texture = "gfx/interface/buttons/button_round_big.dds"
														onclick = "[BuildingLevelItem.OnClick]"
														tooltip = "[BuildingLevelItem.GetTooltip]"
														using = tooltip_ne
														tooltip_offset = { 40 0 }
														button_icon_highlight = {
															name = "level_icon"
															parentanchor = center
															size = { 41 24 }
															down = "[BuildingLevelItem.IsSelected]"
															texture = "[BuildingLevelItem.GetIcon]"
															# frame = 2
														}
														icon = {
															visible = "[BuildingLevelItem.IsSelected]"
															parentanchor = bottom|hcenter
															position = { 0 8 }
															texture = "gfx/interface/window_county/building_selected_arrow.dds"
															size = { 18 12 }
															using = Master_Button_Modify_Texture
															blockoverride "master_color_frame" {
																frame = 2
															}
														}
													}
												}
											}
										}
									}
									spacer = {
										size = { 10 10 }
									}
									# Buliding info
									vbox = {
										layoutpolicy_horizontal = expanding
										background = {
											using = Background_Frame
										}
										hbox = {
											layoutpolicy_horizontal = expanding
											margin_top = 5
											margin_left = 15
											text_label_left = {
												layoutpolicy_horizontal = expanding
												text = "[GUITrackItem.GetSelectedBuilding.GetNameNoTooltip]"
												default_format = "#high"
												using = Font_Size_Medium
											}
										}
										hbox = {
											name = "flavor_and_effect"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											margin = { 5 5 }
											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												text_multi = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													margin = { 10 5 }
													autoresize = yes
													max_width = 330
													min_width = 330
													text = "[GUITrackItem.GetSelectedBuilding.GetDescription]"
												}
												hbox = {
													visible = "[And(And(GUITrackItem.CanReplaceOrCancel,GUITrackItem.IsCurrentBuildingSelected),Not(GUITrackItem.IsConstructing))]"
													spacing = 10
													margin_bottom = 5
													text_single = {
														text = "CURRENT_BUILDING"
														default_format = "#weak"
														align = nobaseline
													}
												}
												vbox = {
													visible = "[And(And(GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,GUITrackItem.GetCurrentBuilding.GetLevel),GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,'(int32)1')),Not(GUITrackItem.IsNextBuildingSelected))]"
													layoutpolicy_horizontal = expanding
													margin_left = 10
													margin_bottom = 5
													spacing = 5
													text_label_left = {
														layoutpolicy_horizontal = expanding
														text = "UPGRADE_COST"
													}
													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 10
														margin = { 10 10 }
														hbox = {
															spacing = 10
															text_single = {
																datacontext = "[GUITrackItem.GetSelectedGoldCost]"
																visible = "[GUITrackItem.HasSelectedGoldCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"
																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetGold,ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}
															text_single = {
																datacontext = "[GUITrackItem.GetSelectedPrestigeCost]"
																visible = "[GUITrackItem.HasSelectedPrestigeCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"
																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}
															text_single = {
																datacontext = "[GUITrackItem.GetSelectedPietyCost]"
																visible = "[GUITrackItem.HasSelectedPietyCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"
																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}
															text_single = {
																datacontext = "[GUITrackItem.GetSelectedConstructionTime]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"
																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}
														}
														warning_icon = {
															name = "cant_construct"
															size = { 30 30 }
															tooltip = "[GUITrackItem.GetSelectedBuildingBlockReasons]"
															visible = "[Not(GUITrackItem.CanConstructSelectedBuilding)]"
														}
														expand = {}
													}
												}
											}
											divider_light = {
												layoutpolicy_vertical = expanding
											}
											text_multi = {
												datacontext = "[HoldingView.GetProvince.GetCounty.GetCulture]"
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												autoresize = yes
												max_width = 355
												min_width = 355
												text = "[GUITrackItem.GetSelectedBuilding.GetEffectDescriptionAtProvince(Character.Self,HoldingView.GetProvince,Culture.Self)]"
												margin = { 15 10 }
											}
										}
									}
									vbox = {
										visible = "[GUITrackItem.IsConstructing]"
										layoutpolicy_horizontal = expanding
										margin = { 0 15 }
										spacing = 10
										text_single = {
											text = "HOLDING_VIEW_IN_PROGRESS"
											margin = { 0 5 }
										}
										hbox = {
											spacing = 10
											hbox = {
												widget = {
													size = { 20 20 }
													button_round  = {
														name = "abort_button"
														parentanchor = center
														visible = "[GUITrackItem.CanShowReplaceOrCancel]"
														enabled = "[GUITrackItem.CanReplaceOrCancel]"
														onclick = "[GUITrackItem.ReplaceOrCancel]"
														tooltip = "[GUITrackItem.GetReplaceOrCancelTooltip]"
														button_cancel = {
															parentanchor = center
															alwaystransparent = yes
														}
													}
												}
											}
											progressbar_standard = {
												name = "construct_progressbar"
												layoutpolicy_horizontal = expanding
												layoutstretchfactor_horizontal = 1
												size = { 300 25 }
												alwaystransparent = yes
												value = "[GUITrackItem.GetConstructionProgress]"
												text_single = {
													parentanchor = center
													text = "[GUITrackItem.GetConstructTimeLeft]"
													default_format = "#high"
													align = nobaseline
												}
											}
										}
									}
									spacing = 5
									hbox = {
										visible = "[Not(GUITrackItem.IsConstructing)]"
										spacing = 10
										# layoutpolicy_horizontal = expanding
										margin = { 10 10 }
										vbox = {
											layoutpolicy_vertical = expanding
											expand = {}
											button_standard_back = {
												name = "back_button"
												text = "BACK_LABEL"
												visible = "[And(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel,'(int32)1'),Not(GUITrackItem.IsConstructing))]"
												onclick = "[GUITrackItem.GoBack]"
												oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
												clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
											}
											button_round = {
												name = "replace_button"
												onclick = "[GUITrackItem.ReplaceOrCancel]"
												tooltip = "[GUITrackItem.GetReplaceOrCancelTooltip]"
												visible = "[And(GUITrackItem.IsCurrentBuildingSelected,GUITrackItem.CanReplaceOrCancel)]"
												button_change = {
													alwaystransparent = yes
													parentanchor = center
												}
											}
										}
										vbox = {
											spacing = 10
											hbox = {
												visible = "[GUITrackItem.HasNextBuilding]"
												layoutpolicy_horizontal = expanding
												hbox = {
													margin = { 10 5 }
													margin_right = 15
													spacing = 10
													background = {
														using = Background_Area
														margin_bottom = 4
														margin_left = 6
													}
													text_single = {
														datacontext = "[GUITrackItem.GetNextGoldCost]"
														visible = "[GUITrackItem.HasNextGoldCost]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_enabled = "[ValueBreakdown.HasTooltip]"
														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}
														background = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetGold,ValueBreakdown.GetFixedPointValue)]"
															using = Status_Bad
														}
													}
													text_single = {
														datacontext = "[GUITrackItem.GetNextPrestigeCost]"
														visible = "[GUITrackItem.HasNextPrestigeCost]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_enabled = "[ValueBreakdown.HasTooltip]"
														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}
														background = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige,ValueBreakdown.GetFixedPointValue)]"
															using = Status_Bad
														}
													}
													hbox = {
														layoutpolicy_horizontal = expanding
														datacontext = "[GUITrackItem.GetNextPietyCost]"
														visible = "[GUITrackItem.HasNextPietyCost]"
														text_single = {
															text = "[ValueBreakdown.GetValue]"
															tooltip_enabled = "[ValueBreakdown.HasTooltip]"
															tooltipwidget = {
																widget_value_breakdown_tooltip = {}
															}
														}
														text_single = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety,ValueBreakdown.GetFixedPointValue)]"
															raw_text = "@warning_icon!"
														}
														expand = {}
													}
													text_single = {
														layoutpolicy_horizontal = expanding
														datacontext = "[GUITrackItem.GetNextConstructionTime]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_enabled = "[ValueBreakdown.HasTooltip]"
														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}
													}
												}
											}
											button_primary = {
												#	layoutpolicy_vertical = expanding
												#	layoutpolicy_horizontal = expanding
												#	size = { 250 53 }
												onclick = "[GUITrackItem.OnClick]"
												tooltip = "[GUITrackItem.GetNextBuildingTooltip]"
												enabled = "[GUITrackItem.CanConstructNextBuilding]"
												visible = "[GUITrackItem.HasNextBuilding]"
												text = "[SelectLocalization(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel,'(int32)1'),'CONSTRUCT','UPGRADE')]"
												#	using = Font_Size_Medium
											}
										}
									}
								}
							}
						}
						expand = {}
					}
					expand = {}
				}
			}
		}
		expand = {}
	}
}
######################################################
############ HOLDING TYPE SELECTION VIEW #############
######################################################
window = {
	name = "holding_type_selection_view"
	movable = no
	layer = windows_layer
	parentanchor = bottom|hcenter
	position = { 40 -50 }
	using = Animation_ShowHide_Quick
	using = Window_Background_Subwindow
	vbox = {
		set_parent_size_to_minimum = yes
		margin = { 4 4 }
		margin_bottom = 15
		spacing = 15
		header_pattern = {
			layoutpolicy_horizontal = expanding
			blockoverride "header_text"
			{
				text = "CREATE_NEW_HOLDING_HEADING"
			}
			blockoverride "button_close"
			{
				onclick = "[HoldingView.CloseHoldingConstruction]"
			}
		}
		building_in_vassal_warning_hbox = {}
		hbox = {
			name = "holding_types"
			datamodel = "[HoldingView.GetHoldingTypeItems]"
			layoutpolicy_horizontal = expanding
			spacing = 10
			margin = { 10 10 }
			item = {
				vbox = {
					spacing = 5
					button_standard = {
						size = { 250 148 }
						enabled = "[HoldingTypeItem.CanConstructBuilding]"
						onclick = "[HoldingTypeItem.OnClick]"
						tooltip = "[HoldingTypeItem.GetTooltip]"
						datacontext = "[HoldingTypeItem.GetProvince]"
						widget = {
							scissor = yes
							size = { 247 146 }
							icon = {
								visible = "[HoldingTypeItem.CanConstructBuilding]"
								size = { 320 146 }
								texture = "[HoldingTypeItem.GetBuilding.GetIllustration(Province.Self)]"
								using = Mask_Rough_Edges
								alpha = 0.7
							}
							highlight_icon = {
								visible = "[Not(HoldingTypeItem.CanConstructBuilding)]"
								size = { 320 146 }
								texture = "[HoldingTypeItem.GetBuilding.GetIllustration(Province.Self)]"
								effectname = "GreyedOut"
								tintcolor = { 0.6 0.6 0.6 1 }
								using = Mask_Rough_Edges
							}
						}
						flowcontainer = {
							parentanchor = bottom|right
							ignoreinvisible = yes
							margin = { 5 5 }
							warning_icon = {
								name = "wrong_type"
								visible = "[Not(HoldingTypeItem.IsValidForPlayer)]"
								size = { 35 35 }
								tooltip = HOLDING_SELECTION_VIEW_WRONG_HOLDING_TYPE
							}
						}
					}
					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "[HoldingTypeItem.GetHoldingType.GetName]"
					}
				}
			}
		}
	}
}
######################################################
################ TYPES AND TEMPLATES #################
######################################################
types CountyViewTypes
{
	type widget_building_item = widget {
		parentanchor = bottom
		size = { 55 55 }
		enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"
		tooltip = "[GUIBuildingItem.GetTooltip]"
		using = tooltip_ne
		button_standard = {
			name = "building_button"
			size = { 100% 100% }
			onclick = "[GUIBuildingItem.OnClick]"
			down = "[GUIBuildingItem.IsHighlighted]"
			highlight_icon = {
				name = "build_new_icon"
				visible = "[And(And(GUIBuildingItem.IsBuildNewIconShown,GUIBuildingItem.IsBuildingButtonEnabled),Not(GUIBuildingItem.HasLevel))]"
				parentanchor = center
				size = { 28 28 }
				alpha = 0.7
				texture = "gfx/interface/icons/symbols/icon_plus.dds"
			}
			icon_building = {
				name = "building_icon"
				visible = "[Not(GUIBuildingItem.CanUpgrade)]"
				parentanchor = center
				size = { 40 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}
			highlight_icon_building = {
				name = "building_icon_can_upgrade"
				visible = "[GUIBuildingItem.CanUpgrade]"
				parentanchor = center
				size = { 40 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}
			text_single= {
				visible = "[GUIBuildingItem.HasLevel]"
				text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
				parentanchor = bottom|right
				margin_left = 3
				position = { -6 -3 }
				fontsize = 15
				default_format = "#low;bold"
				align = nobaseline
				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}
				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}
				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}
			}
			warning_icon = {
				name = "reduced_by_fixable_situation"
				visible = "[GUIBuildingItem.IsBuildingDisabled]"
				size = { 25 25 }
			}
		}
		icon = {
			name = "building_slot"
			size = { 100% 100% }
			using = Background_Area
			visible = "[GUIBuildingItem.IsBuildingSlotShown]"
		}
		progressbar_standard = {
			name = "construct_progressbar"
			visible = "[GUIBuildingItem.IsConstructing]"
			parentanchor = bottom
			position = { 0 8 }
			alwaystransparent = yes
			size = { 100% 10 }
			value = "[GUIBuildingItem.GetConstructingProgress]"
			direction = horizontal
			tooltip = "[GUIBuildingItem.GetTooltip]"
		}
	}
	type building_in_vassal_warning_hbox = hbox
	{
		name = "vassal_warning"
		visible = "[Not(ObjectsEqual(HoldingView.GetHolder,GetPlayer))]"
		coa_title_tiny = {
			datacontext = "[HoldingView.GetHolder.GetPrimaryTitle]"
		}
		text_multi = {
			autoresize = yes
			text = "HOLDING_VIEW_BUILDING_IN_VASSAL"
		}
	}
}